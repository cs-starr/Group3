#!/usr/bin/env python3

"""
Program: database API
File: db_API.py
Function: To retrieve information from the database to middle layer
Author: Janani Govindarasan
Database tier of implementation of a Chromosome (7) Browse, searches database and returns
matching entry details
MSc. Bioinformatics, Birkbeck & UCL - BioComputing II
Taught by: Dr. Andrew C.R. Martin. UCL
Description:
============
This program contains functions to retrieve relevent information from the database, searches database and returns
matching entry details

"""

import pymysql
import sys
sys.path.insert(0, "../../")

import config as cf  
import pymysql.cursors
import re
import db_parser


#Query accessing MySQL database to return gene information.

def all_genebank():

    cursorObject        = connectionObject.cursor() 
    sqlquery= 'SELECT Accession, gene_id, location, dna_seq, aa_seq'
    cursorObject.execute(sqlquery)
    rows                = cursorObject.fetchall()

    for row in rows:
    yield(row)

    connection.close()
    
    return[('accession_number', 'gene_id', 'protein name','chromosomal location')]
    
   
#get gene entries
def getgeneentries(gene):

 
    cursorObject        = connectionObject.cursor() 
    sqlquery= 'SELECT gene.accession, gene.cds '
    cursorObject.execute(sqlQuery)
    rows                = cursorObject.fetchall()

    for row in rows:
    yield(row)

    connection.close()
    
      Input:gene
    Output:Returns a dictionary for a specific gene.
    
    return[("gene_id","accession_code","product","location","Translation","dna_seq")]




#get accession number
def sequence(accession):
    
     cursorObject        = connectionObject.cursor() 
    sqlquery= 'SELECT accession, sequence'
    cursorObject.execute(sqlQuery)
    rows                = cursorObject.fetchall()

    for row in rows:
    yield(row)

     return[("gene_id","accession","protein id","location","translation","dna seq")]
    
    
    
 """
    gets gene information from database
    return: A SQL query returning a summary list of protein product names. 
    return[("gene_id","accession","protein id","location","translation","dna seq")]
       
 """

def get_proteinnames():
    
    
   cursorObject        = connectionObject.cursor() 
    sqlquery= 'SELECT DISTINCT product \
    cursorObject.execute(sqlQuery)
    rows                = cursorObject.fetchall()

    for row in rows:
    yield(row)

    connection.close()
    

    
    """
    gets gene information through accession number
       input:accession number
       return: Returned will be a list of accession numbers.
    """
def get_accessionno():
 
    
   cursorObject        = connectionObject.cursor() 
    sqlquery= 'SELECT Accession'
    cursorObject.execute(sqlQuery)
    rows                = cursorObject.fetchall()

    for row in rows:
    yield(row)

    connection.close()
    
    
    
    """
    SQL query returning a list of chromosomal locations
    """   
 def get_chrom_loc():
   
    
   cursorObject        = connectionObject.cursor() 
    sqlquery= 'SELECT Accession, location'
    cursorObject.execute(sqlQuery)
    rows                = cursorObject.fetchall()

    for row in rows:
    yield(row)

    connection.close()
    
    
    
    
    """fetch gene information through gene identifier 
       input:gene_id
       return: SQL query returning a list of genes.
    """
def get_geneid():
  
    
   cursorObject        = connectionObject.cursor() 
    sqlquery= 'SELECT Accession, gene_id, '
    cursorObject.execute(sqlQuery)
    rows                = cursorObject.fetchall()

    for row in rows:
    yield(row)
    

    """
    Output:Returns a list of CDS records and would access the MySQL database
    """

def get_CDS():

   cursorObject        = connectionObject.cursor() 
    sqlquery= 'SELECT Accession, gene_id, '
    cursorObject.execute(sqlQuery)
    rows                = cursorObject.fetchall()

    for row in rows:
    yield(row)
    

    connection.close()
    
    
