#!/usr/bin/env python3

import cgi;

# Useful debugging output
import cgitb
cgitb.enable()  # Send errors to browser
# cgitb.enable(display=0, logdir="/path/to/logdir") # log errors to a file

#Enter your personal URL here: 
p_url = "http://http://student.cryst.bbk.ac.uk/cgi-bin/cgiwrap/sc004/"
#make url to view details page
url = p_url + "details.cgi"


# The next few lines are commented out, but they are what I would write if I could get cgi.Fieldstorage to work. I got key errors even when I was just copying Dr Martin's solutions from the first cgi practical

#form = cgi.FieldStorage()

#term    = form["term"].value
#method     = form["method"].value
#r_enz = form["r_enz"].value

#hardcoding these values: 
term = "ABCB1"
method = 'gene_id'
r_enz = 'ecor1'

#formatting input to be of the form required by frontend_input, which is (searchfield, data_type, rest_enzyme_flag, rest_enzyme_name)
r_flag = True
r_name = r_enz
if r_enz == 'none': 
    r_flag = False
    r_name = ""


 
#If I weren't writing dummy code, I would import this function from the module blapi_real.py
def frontend_input(searchfield, data_type, rest_enzyme_flag, rest_enzyme_name):
    """
    This is a dummy version of the function used to make a functional webpage.
    Input: (searchfield, data_type, rest_enzyme_flag, rest_enzyme_name)
    Returns: {index:([Gene name, Accession, Protein product name, Chromosomal location],[raw DNA sequence, Exon locations], alignment, codon_data, renzyme_output)}  
    -------
    """   
    entries = {0: (['ABCB1', 'HQ291662', 'multidrug resistance protein 1', '7q21.12'], ['ctgcttgatggcaaagaaataaagcgactgaatgttcagtggctccgagcacacctgggcatcgtgtcccaggagcccatcctgtttgactgcagcattgctgagaacattgcctatggagacaacagccgggtggtgtcacaggaagagatcgtgagggcagcaaaggaggccaacatacatgccttcatcgagtcactgcctaat', [('<1', '>207')]], [('L', 'CTG'), ('L', 'CTT'), ('D', 'GAT'), ('G', 'GGC'), ('K', 'AAA'), ('E', 'GAA'), ('I', 'ATA'), ('K', 'AAG'), ('R', 'CGA'), ('L', 'CTG'), ('N', 'AAT'), ('V', 'GTT'), ('Q', 'CAG'), ('W', 'TGG'), ('L', 'CTC'), ('R', 'CGA'), ('A', 'GCA'), ('H', 'CAC'), ('L', 'CTG'), ('G', 'GGC'), ('I', 'ATC'), ('V', 'GTG'), ('S', 'TCC'), ('Q', 'CAG'), ('E', 'GAG'), ('P', 'CCC'), ('I', 'ATC'), ('L', 'CTG'), ('F', 'TTT'), ('D', 'GAC'), ('C', 'TGC'), ('S', 'AGC'), ('I', 'ATT'), ('A', 'GCT'), ('E', 'GAG'), ('N', 'AAC'), ('I', 'ATT'), ('A', 'GCC'), ('Y', 'TAT'), ('G', 'GGA'), ('D', 'GAC'), ('N', 'AAC'), ('S', 'AGC'), ('R', 'CGG'), ('V', 'GTG'), ('V', 'GTG'), ('S', 'TCA'), ('Q', 'CAG'), ('E', 'GAA'), ('E', 'GAG'), ('I', 'ATC'), ('V', 'GTG'), ('R', 'AGG'), ('A', 'GCA'), ('A', 'GCA'), ('K', 'AAG'), ('E', 'GAG'), ('A', 'GCC'), ('N', 'AAC'), ('I', 'ATA'), ('H', 'CAT'), ('A', 'GCC'), ('F', 'TTC'), ('I', 'ATC'), ('E', 'GAG'), ('S', 'TCA'), ('L', 'CTG'), ('P', 'CCT'), ('N', 'AAT')], {'ATT': (2, 'I', 2.898550724637681), 'ATC': (4, 'I', 5.797101449275362), 'ATA': (2, 'I', 2.898550724637681), 'CTT': (1, 'L', 1.4492753623188406), 'CTC': (1, 'L', 1.4492753623188406), 'CTA': (0, 'L', 0.0), 'CTG': (5, 'L', 7.246376811594203), 'TTA': (0, 'L', 0.0), 'TTG': (0, 'L', 0.0), 'GTT': (1, 'V', 1.4492753623188406), 'GTC': (0, 'V', 0.0), 'GTA': (0, 'V', 0.0), 'GTG': (4, 'V', 5.797101449275362), 'TTT': (1, 'F', 1.4492753623188406), 'TTC': (1, 'F', 1.4492753623188406), 'ATG': (0, 'M', 0.0), 'TGT': (0, 'C', 0.0), 'TGC': (1, 'C', 1.4492753623188406), 'GCT': (1, 'A', 1.4492753623188406), 'GCC': (3, 'A', 4.3478260869565215), 'GCA': (3, 'A', 4.3478260869565215), 'GCG': (0, 'A', 0.0), 'GGT': (0, 'G', 0.0), 'GGC': (2, 'G', 2.898550724637681), 'GGA': (1, 'G', 1.4492753623188406), 'GGG': (0, 'G', 0.0), 'CCT': (1, 'P', 1.4492753623188406), 'CCC': (1, 'P', 1.4492753623188406), 'CCA': (0, 'P', 0.0), 'CCG': (0, 'P', 0.0), 'ACT': (0, 'T', 0.0), 'ACC': (0, 'T', 0.0), 'ACA': (0, 'T', 0.0), 'ACG': (0, 'T', 0.0), 'TCT': (0, 'S', 0.0), 'TCC': (1, 'S', 1.4492753623188406), 'TCA': (2, 'S', 2.898550724637681), 'TCG': (0, 'S', 0.0), 'AGT': (0, 'S', 0.0), 'AGC': (2, 'S', 2.898550724637681), 'TAT': (1, 'Y', 1.4492753623188406), 'TAC': (0, 'Y', 0.0), 'TGG': (1, 'W', 1.4492753623188406), 'CAA': (0, 'Q', 0.0), 'CAG': (3, 'Q', 4.3478260869565215), 'AAT': (2, 'N', 2.898550724637681), 'AAC': (3, 'N', 4.3478260869565215), 'CAT': (1, 'H', 1.4492753623188406), 'CAC': (1, 'H', 1.4492753623188406), 'GAA': (2, 'E', 2.898550724637681), 'GAG': (5, 'E', 7.246376811594203), 'GAT': (1, 'D', 1.4492753623188406), 'GAC': (2, 'D', 2.898550724637681), 'AAA': (1, 'K', 1.4492753623188406), 'AAG': (2, 'K', 2.898550724637681), 'CGT': (0, 'R', 0.0), 'CGC': (0, 'R', 0.0), 'CGA': (2, 'R', 2.898550724637681), 'CGG': (1, 'R', 1.4492753623188406), 'AGA': (0, 'R', 0.0), 'AGG': (1, 'R', 1.4492753623188406), 'TAA': (0, 'Stop', 0.0), 'TAG': (0, 'Stop', 0.0), 'TGA': (0, 'Stop', 0.0)}, ({'ecor1': [(('No', 'activity'), 2)], 'bamh1': [(('No', 'activity'), 2)], 'bsum': [(('No', 'activity'), 2)]}, [('ecor1', 1), ('bamh1', 1), ('bsum', 1)])), 1: (['TCRG', 'M13824', 'T cell receptor gamma chain variable region', '7p15-p14'], ['aggaaggcatgcggtgggccctactggtgcttctagctttcctgtctcctggtgagtacgctgcctacagagaggctcacaggttgggttttgttttgttttcttcttgaaaggggtgccatacaaaggaatacctcattgtattttgtgttgttcccattgcagccagtcagaaatcttccaacttggaagggagaacgaagtcagtcaccaggcagactgggtcatctgctgaaatcacttgcgatcttactgtaacaaataccttctacatccactggtacctacaccaggaggggaaggccccacagcgtcttctgtactatgacgtctccaccgcaagggatgtgttggaatcaggactcagtccaggaaagtattatactcatacacccaggaggtggagctggatattgagactgcaaaatctaattgaaaatgattctggggtctattactgtgccacctggcggacgaattattataagaaactctttggcagtggaacaacacttgttgtcacaggtaagtatcggaagaatacaacatttccaaggtaatagagggaaggcaggaaatgattaaactggaataatgt', [('9', '51'), ('166', '>525')]], [('M', 'ATG'), ('R', 'CGG'), ('W', 'TGG'), ('A', 'GCC'), ('L', 'CTA'), ('L', 'CTG'), ('V', 'GTG'), ('L', 'CTT'), ('L', 'CTA'), ('A', 'GCT'), ('F', 'TTC'), ('L', 'CTG'), ('S', 'TCT'), ('P', 'CCT'), ('A', 'CCA'), ('S', 'GTC'), ('Q', 'AGA'), ('K', 'AAT'), ('S', 'CTT'), ('S', 'CCA'), ('N', 'ACT'), ('L', 'TGG'), ('E', 'AAG'), ('G', 'GGA'), ('R', 'GAA'), ('T', 'CGA'), ('K', 'AGT'), ('S', 'CAG'), ('V', 'TCA'), ('T', 'CCA'), ('R', 'GGC'), ('Q', 'AGA'), ('T', 'CTG'), ('G', 'GGT'), ('S', 'CAT'), ('S', 'CTG'), ('A', 'CTG'), ('E', 'AAA'), ('I', 'TCA'), ('T', 'CTT'), ('C', 'GCG'), ('D', 'ATC'), ('L', 'TTA'), ('T', 'CTG'), ('V', 'TAA'), ('T', 'CAA'), ('N', 'ATA'), ('T', 'CCT'), ('F', 'TCT'), ('Y', 'ACA'), ('I', 'TCC'), ('H', 'ACT'), ('W', 'GGT'), ('Y', 'ACC'), ('L', 'TAC'), ('H', 'ACC'), ('Q', 'AGG'), ('E', 'AGG'), ('G', 'GGA'), ('K', 'AGG'), ('A', 'CCC'), ('P', 'CAC'), ('Q', 'AGC'), ('R', 'GTC'), ('L', 'TTC'), ('L', 'TGT'), ('Y', 'ACT'), ('Y', 'ATG'), ('D', 'ACG'), ('V', 'TCT'), ('S', 'CCA'), ('T', 'CCG'), ('A', 'CAA'), ('R', 'GGG'), ('D', 'ATG'), ('V', 'TGT'), ('L', 'TGG'), ('E', 'AAT'), ('S', 'CAG'), ('G', 'GAC'), ('L', 'TCA'), ('S', 'GTC'), ('P', 'CAG'), ('G', 'GAA'), ('K', 'AGT'), ('Y', 'ATT'), ('Y', 'ATA'), ('T', 'CTC'), ('H', 'ATA'), ('T', 'CAC'), ('P', 'CCA'), ('R', 'GGA'), ('R', 'GGT'), ('W', 'GGA'), ('S', 'GCT'), ('W', 'GGA'), ('I', 'TAT'), ('L', 'TGA'), ('R', 'GAC'), ('L', 'TGC'), ('Q', 'AAA'), ('N', 'ATC'), ('L', 'TAA'), ('I', 'TTG'), ('E', 'AAA'), ('N', 'ATG'), ('D', 'ATT'), ('S', 'CTG'), ('G', 'GGG'), ('V', 'TCT'), ('Y', 'ATT'), ('Y', 'ACT'), ('C', 'GTG'), ('A', 'CCA'), ('T', 'CCT'), ('W', 'GGC'), ('R', 'GGA'), ('T', 'CGA'), ('N', 'ATT'), ('Y', 'ATT'), ('Y', 'ATA'), ('K', 'AGA'), ('K', 'AAC'), ('L', 'TCT'), ('F', 'TTG'), ('G', 'GCA'), ('S', 'GTG'), ('G', 'GAA'), ('T', 'CAA'), ('T', 'CAC'), ('L', 'TTG'), ('V', 'TTG'), ('V', 'TCA'), ('T', 'CAG')], {'ATT': (0, 'I', 0.0), 'ATC': (1, 'I', 2.2222222222222223), 'ATA': (0, 'I', 0.0), 'CTT': (3, 'L', 6.666666666666667), 'CTC': (0, 'L', 0.0), 'CTA': (2, 'L', 4.444444444444445), 'CTG': (6, 'L', 13.333333333333334), 'TTA': (1, 'L', 2.2222222222222223), 'TTG': (0, 'L', 0.0), 'GTT': (0, 'V', 0.0), 'GTC': (1, 'V', 2.2222222222222223), 'GTA': (0, 'V', 0.0), 'GTG': (1, 'V', 2.2222222222222223), 'TTT': (0, 'F', 0.0), 'TTC': (1, 'F', 2.2222222222222223), 'ATG': (1, 'M', 2.2222222222222223), 'TGT': (0, 'C', 0.0), 'TGC': (0, 'C', 0.0), 'GCT': (1, 'A', 2.2222222222222223), 'GCC': (1, 'A', 2.2222222222222223), 'GCA': (0, 'A', 0.0), 'GCG': (1, 'A', 2.2222222222222223), 'GGT': (1, 'G', 2.2222222222222223), 'GGC': (1, 'G', 2.2222222222222223), 'GGA': (1, 'G', 2.2222222222222223), 'GGG': (0, 'G', 0.0), 'CCT': (1, 'P', 2.2222222222222223), 'CCC': (0, 'P', 0.0), 'CCA': (3, 'P', 6.666666666666667), 'CCG': (0, 'P', 0.0), 'ACT': (1, 'T', 2.2222222222222223), 'ACC': (0, 'T', 0.0), 'ACA': (0, 'T', 0.0), 'ACG': (0, 'T', 0.0), 'TCT': (1, 'S', 2.2222222222222223), 'TCC': (0, 'S', 0.0), 'TCA': (2, 'S', 4.444444444444445), 'TCG': (0, 'S', 0.0), 'AGT': (1, 'S', 2.2222222222222223), 'AGC': (0, 'S', 0.0), 'TAT': (0, 'Y', 0.0), 'TAC': (0, 'Y', 0.0), 'TGG': (2, 'W', 4.444444444444445), 'CAA': (0, 'Q', 0.0), 'CAG': (1, 'Q', 2.2222222222222223), 'AAT': (1, 'N', 2.2222222222222223), 'AAC': (0, 'N', 0.0), 'CAT': (1, 'H', 2.2222222222222223), 'CAC': (0, 'H', 0.0), 'GAA': (1, 'E', 2.2222222222222223), 'GAG': (0, 'E', 0.0), 'GAT': (0, 'D', 0.0), 'GAC': (0, 'D', 0.0), 'AAA': (1, 'K', 2.2222222222222223), 'AAG': (1, 'K', 2.2222222222222223), 'CGT': (0, 'R', 0.0), 'CGC': (0, 'R', 0.0), 'CGA': (1, 'R', 2.2222222222222223), 'CGG': (1, 'R', 2.2222222222222223), 'AGA': (2, 'R', 4.444444444444445), 'AGG': (0, 'R', 0.0), 'TAA': (1, 'Stop', 2.2222222222222223), 'TAG': (0, 'Stop', 0.0), 'TGA': (0, 'Stop', 0.0)}, ({'ecor1': [(('No', 'activity'), 2)], 'bamh1': [(('No', 'activity'), 2)], 'bsum': [(('No', 'activity'), 2)]}, [('ecor1', 1), ('bamh1', 1), ('bsum', 1)]))}
    return(entries)

def make_table(var): 
    """
    Function that makes a table when given a list of lists. 
    Input: a list of lists
    Output: lines of html
    """
    code = "<p>| Gene ID | Genbank accession | Protein product | chromosome location |</p>\n"
    
    for row in var: 
        line = "<p>|"
        for term in row: 
            line += " " + term + " |"
        line += "</p>\n"
        code += line
    
    return(code)

    
results = frontend_input(term,method,r_flag,r_name)
*key_list, = results

gen_info = []
for k in key_list: 
    info = results[k][0]
    gen_info.append(info)
test_v = gen_info[0][0]
table = make_table(gen_info)
id_list = [line[0] for line in gen_info]
# Print the HTML MIME-TYPE header
print ("Content-Type: text/html\n")


html = "<html>\n"
html += "<head>\n"

html += "<title>Search results</title>\n"
html += "</head>\n\n"

html += "<body>\n"


html += "<h2>Search results</h2>\n"
#html += "<p>" + test_v + "</p>"
html += table

html += "<form action=" + url +" method='post'>"

html += "<p><b>Choose gene to see details of:</b></p>"
html += "<p>" 
html += "<input name='gene_id' value="+id_list[0]+" type='radio' checked='checked' />" + id_list[0]
for id in id_list[1:]: 
    html += "&nbsp;&nbsp;&nbsp;"
    html += "<input name='gene_id' value="+id+" type='radio' />" + id
html += "<input name='r_enz' value="+r_enz+" type='hidden' />"
html += "</p>"
html += "<p>"
html += "<input type='submit' value='Submit' />"
html += "</p>"
html += "</form>"
html += "</body>\n"
html += "</html>\n"


print (html)



